-- Create sample tables
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    status VARCHAR(20) CHECK (status IN ('REGULAR', 'SILVER', 'GOLD')),
    balance DECIMAL(10,2) DEFAULT 0.00,
    join_date DATE NOT NULL
);

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(customer_id),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'PENDING'
);

CREATE TABLE order_items (
    item_id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(order_id),
    product_name VARCHAR(100) NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL
);

-- Insert sample data
INSERT INTO customers (name, email, status, balance, join_date) VALUES
('John Doe', 'john@example.com', 'GOLD', 500.00, '2020-01-15'),
('Jane Smith', 'jane@example.com', 'SILVER', 250.00, '2021-03-22'),
('Bob Johnson', 'bob@example.com', 'REGULAR', 100.00, '2022-11-05');

INSERT INTO orders (customer_id, order_date, total_amount, status) VALUES
(1, '2023-10-01 09:30:00', 150.00, 'COMPLETED'),
(1, '2023-10-15 14:45:00', 225.50, 'COMPLETED'),
(2, '2023-10-10 11:20:00', 75.25, 'COMPLETED'),
(3, '2023-10-20 16:10:00', 120.00, 'PENDING');

INSERT INTO order_items (order_id, product_name, quantity, unit_price) VALUES
(1, 'Wireless Mouse', 1, 45.00),
(1, 'Mechanical Keyboard', 1, 105.00),
(2, 'Monitor Stand', 1, 35.50),
(2, 'USB-C Hub', 1, 65.00),
(2, 'Desk Lamp', 1, 125.00),
(3, 'Mouse Pad', 1, 15.25),
(3, 'Screen Cleaner', 2, 30.00),
(4, 'Bluetooth Speaker', 1, 120.00);





CREATE OR REPLACE FUNCTION calculate_discount(
    p_amount DECIMAL(10,2),
    p_customer_status VARCHAR(20)
) RETURNS DECIMAL(10,2) 
AS $$
DECLARE
    v_discount DECIMAL(10,2);
BEGIN
    IF p_customer_status = 'GOLD' THEN
        v_discount := p_amount * 0.15;
    ELSIF p_customer_status = 'SILVER' THEN
        v_discount := p_amount * 0.10;
    ELSE
        v_discount := p_amount * 0.05;
    END IF;
    
    RETURN GREATEST(v_discount, 0); -- Ensure discount isn't negative
END;
$$ LANGUAGE plpgsql;


SELECT name, status, balance, 
       calculate_discount(balance, status) AS potential_discount
FROM customers;




CREATE OR REPLACE PROCEDURE process_order(
    p_customer_id INTEGER,
    p_order_amount DECIMAL(10,2))
AS $$
DECLARE
    v_customer_status VARCHAR(20);
    v_discount DECIMAL(10,2);
    v_final_amount DECIMAL(10,2);
    v_order_id INTEGER;
BEGIN
    -- Get customer status
    SELECT status INTO v_customer_status
    FROM customers
    WHERE customer_id = p_customer_id;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Customer not found';
    END IF;

    -- Calculate discount using our function
    v_discount := calculate_discount(p_order_amount, v_customer_status);
    v_final_amount := p_order_amount - v_discount;

    -- Create the order
    INSERT INTO orders (customer_id, total_amount)
    VALUES (p_customer_id, v_final_amount)
    RETURNING order_id INTO v_order_id;

    -- Update customer balance
    UPDATE customers
    SET balance = balance - v_final_amount
    WHERE customer_id = p_customer_id;

    -- Log the transactin
    RAISE NOTICE 'Order % created for customer %. Discount: %, Final amount: %',
                 v_order_id, p_customer_id, v_discount, v_final_amount;
END;
$$ LANGUAGE plpgsql;



CALL process_order(1, 200.00);
CALL process_order(2, 150.00);
CALL process_order(3, 80.00);

-- Verify results
SELECT * FROM orders ORDER BY order_id DESC LIMIT 3;
SELECT * FROM customers;


